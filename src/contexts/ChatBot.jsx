import { useState, useRef, useEffect } from "react";
import { useTheme } from "../contexts/ThemeContext";
import { FaRobot } from "react-icons/fa";

const FAQ = {
  "login issue":
    "🔑 Try refreshing the site 🔄, or log out and log back in. If the issue continues, check your 🌐 network.",
  "forgot password":
    "🙈 Use the 'Forgot Password' link to reset your password via your 📧 registered email.",
  "register issue":
    "📝 Make sure all fields are filled correctly ✅, and your email is valid 📬.",
  features:
    "👨‍💼 Admins manage employees, 👩‍💻 HR can analyze salary data 📊, and 👨‍🎓 Staff can view payslips 💳.",
  "salary slip":
    "💰 Employees can view payslips from the Staff Dashboard 📂 under 'Payslips'.",
  "update profile":
    "👤 Go to Profile Settings ⚙️ to update your details and 💾 save changes.",
  "admin add employee":
    "➕ Admins can add employees via the Admin Dashboard → 'Add Employee'.",
  "admin delete employee":
    "❌ Admins can delete employees from the Admin Dashboard → 'Employee List'.",
  "hr generate report":
    "📊 HR can generate reports under 'Reports' in the HR Dashboard.",
  "staff view payslip":
    "👀 Staff can access their payslips under 'Payslips' in the Staff Dashboard.",
  "salary not updated":
    "⚠️ Ensure salary was generated by HR/Admin; 🔄 refresh your page to see updates.",
  "change password":
    "🔒 Go to Profile → Change Password and follow the prompts 📝.",
  logout: "🚪 Click the 'Logout' button on the top-right corner ↗️.",
  "dashboard not loading":
    "🖥️ Clear your browser cache 🧹 and 🔄 refresh the dashboard.",
  "user role issue":
    "👮 Check your assigned role; only Admins/HR can access specific features 🔑.",
  "generate salary":
    "💸 Admins generate salary via Admin Dashboard → 'Generate Salary'.",
  "view report": "📄 Reports can be viewed by HR under 'Reports' section.",
  "export payslip":
    "⬇️ Click 'Download' on the payslip to export as 📑 PDF.",
  "email not received":
    "📧 Check spam folder 🗑️; emails are sent after actions like registration or password reset.",
  "notification issue":
    "🔔 Ensure notifications are enabled in Profile Settings ⚙️.",
  "login timeout":
    "⏰ Try logging in again; session may have expired 💤.",
  "duplicate employee":
    "👥 Check if the employee is already added before adding a new one.",
  "salary calculation":
    "🧮 Salary is calculated based on configured salary components in Admin Dashboard 📊.",
  "edit salary":
    "✏️ Admins can edit salary components before finalizing salary generation.",
  "report export":
    "📤 Reports can be exported in CSV 📊 or PDF 📑 format from HR Dashboard.",
  "reset password link expired":
    "⏳ Request a new reset link 🔗 from the login page.",
  "unauthorized access":
    "🚫 You are trying to access a restricted page; check your role permissions 🔑.",
  "employee details update":
    "👤 Admins can update employee details via Employee List → ✏️ Edit.",
  "payslip format":
    "📑 Payslips are generated in PDF format showing all salary components 💵.",
  "browser not supported":
    "🌍 Use Chrome, Firefox, or Edge for best compatibility ✅.",
  "session expired":
    "⌛ Login again 🔑; sessions expire after inactivity for security reasons 🛡️.",
  "bulk employee upload":
    "📂 Admins can upload CSV files via Admin Dashboard → Bulk Upload.",
  "hr access denied":
    "🚫 Ensure you are logged in as HR or Admin to access this feature 🔑.",
  "delete payslip":
    "❌ Payslips cannot be deleted; you may regenerate salary if needed 💰.",
  "profile picture":
    "🖼️ Upload profile picture under Profile Settings → Edit Profile 👤.",
  "generate report error":
    "⚠️ Ensure the data exists for selected month 📅 and employee 👥.",
  "system slow":
    "🐢 Check your network 🌐; heavy data may slow down the system.",
  "tax details":
    "💼 Admins enter tax info in Employee Details → Salary Components.",
  "attendance data missing":
    "📅 Ensure attendance is recorded before generating salary.",
  "app update":
    "📲 Check for notifications 🔔 about system updates from Admin.",
  "mobile access":
    "📱 System is responsive; use mobile browser to access dashboards 🌐.",
  "support contact":
    "☎️ Contact HR/Admin via provided email 📧 for unresolved issues.",
  "salary mismatch":
    "🔍 Verify salary components and deductions; regenerate if needed 💵.",
  "duplicate payslip":
    "⚠️ Check if salary was already generated for the month 📅.",
  "forgot username":
    "🙋 Use your registered email 📧 to login or reset credentials.",
  "employee role assignment":
    "👔 Admins assign roles under Employee Details → Role.",
  "generate bonus":
    "🎁 Bonus can be added before salary generation in Admin Dashboard.",
  "leave deduction":
    "🏖️ Leaves are automatically calculated if configured in salary rules.",
  "employee resignation":
    "👋 Mark employee as resigned under Employee List → Edit.",
  "audit report":
    "📑 Admins/HR can download audit reports under 'Reports'.",
  "system backup":
    "💾 Admins can trigger backup from Admin Dashboard → Backup.",
  "change email":
    "📧 Update your email in Profile Settings → Edit Profile.",
  "notification email":
    "🔔 Enable notification emails in Profile → Preferences.",
  "export all payslips":
    "📤 Admins can export multiple payslips via Bulk Export 📑.",
  "salary history":
    "📜 View previous months’ salaries under 'Salary History'.",
  "hr dashboard overview":
    "📊 HR dashboard provides analysis charts 📈 and salary statistics 💰.",
  "admin dashboard overview":
    "🖥️ Admin dashboard shows employee list 👥, salary stats 💵, and system settings ⚙️.",
  "employee login":
    "👨‍💼 Employees login using their registered email 📧 and password 🔑.",
  "forgot password email not received":
    "📭 Check spam or request a new reset email 🔄.",
  "salary approval":
    "✅ Admins must approve salary before it is finalized 💰.",
  "update salary components":
    "✏️ Edit components under Employee Details → Salary Components.",
  "leave management":
    "📅 HR manages leaves under HR Dashboard → Leaves.",
  "bonus management":
    "🎉 HR/Admin can add bonuses under Employee → Salary Components.",
  "deduction management":
    "➖ Deductions are managed under Salary Components.",
  "generate payslip pdf":
    "⬇️ Click 'Download' on the payslip page 📑.",
  "view report pdf":
    "📄 Reports can be downloaded as PDF 📑 or CSV 📊.",
  "system error":
    "⚠️ Try refreshing the page 🔄; contact Admin if it persists 📞.",
  "unauthorized action":
    "🚫 Your role does not have permission for this action 🔑.",
  "reset API key":
    "🔐 Admin can reset API key under System Settings ⚙️.",
  "data import error":
    "📂 Check CSV format; required fields must be included ✅.",
  "salary formula":
    "📊 Salary = Basic + Allowances + Bonus 🎁 - Deductions ➖.",
  "employee ID not found":
    "❓ Verify the employee exists and check spelling 🔍.",
  "generate payslip error":
    "⚠️ Ensure salary is generated before downloading payslip 📑.",
  "admin settings":
    "⚙️ Admins can configure system settings under Admin Dashboard → Settings.",
  "hr settings":
    "👩‍💼 HR can configure report templates 📄 and notifications 🔔.",
  "email template":
    "✉️ Customize emails under System Settings → Email Templates.",
  "system logs":
    "📜 Admins can view system logs under Admin Dashboard → Logs.",
  "backup restore":
    "♻️ Admins can restore backup via Admin Dashboard → Backup.",
  "monthly report":
    "🗓️ HR can generate monthly reports under Reports → Monthly.",
  "yearly report":
    "📆 HR can generate yearly reports under Reports → Yearly.",
  "employee status":
    "✅ Check employee status under Employee List → Status.",
  "salary preview":
    "👀 Preview salary before generating payslip under Admin Dashboard.",
  "forgot password OTP":
    "🔢 Enter the OTP sent to your registered email 📧.",
  "change language":
    "🌐 Go to Profile → Preferences → Language.",
  Boss: "👑 Karthikeya Devarakonda — The Mastermind, Visionary & Ruler of the Code Kingdom 👨‍💻⚔️",
  Inventor: "💡 Karthikeya Devarakonda — A Full Stack Wizard 🧙‍♂️✨, Code Alchemist ⚡, and Digital Architect 🏗️ who turns caffeine ☕ into powerful apps 🚀",
  "About Karthikeya": "🌟 Meet Karthikeya Devarakonda — The Creative Brain 🧠, Full Stack Superhero 🦸‍♂️, and Innovator Extraordinaire 🌍✨. He builds dreams into digital reality 💻⚡, leading with passion ❤️, skill 🎯, and unstoppable energy 🔥!",
  "download all reports":
    "⬇️ Use Bulk Export under Reports section 📑.",
  "generate bonus pdf":
    "🎁 Bonuses are included in payslip PDF automatically 📄.",
  "view payslip history":
    "📜 Employees can view past payslips in Payslip History.",
  "system maintenance":
    "⚙️ System may be down temporarily ⏳; check Admin notifications 🔔.",
  "employee promotion":
    "📈 Update role under Employee Details → Role.",
  "salary component missing":
    "🚧 Add missing component before generating salary 💵.",
  "attendance report":
    "🗓️ HR can generate attendance reports under Reports 📊.",
  "tax calculation":
    "💰 System automatically calculates taxes based on components.",
  "leave report":
    "📄 HR can export leave reports for all employees 👥.",
  "overtime calculation":
    "⏱️ Overtime is added automatically based on attendance records 📝.",
  "employee transfer":
    "🔄 Update department under Employee Details → Department.",
  "generate payslip bulk":
    "👥 Admins can generate payslips for multiple employees at once 📑.",
  "password strength":
    "🔐 Use at least 8 characters with numbers 🔢 and symbols ✨.",
  "failed login attempt":
    "🚫 Too many failed attempts will temporarily lock your account ⏳.",
  "system notification":
    "🔔 Notifications appear on top-right corner ↗️ of the dashboard.",
  "email verification":
    "✅ Verify email using the link sent during registration 📧.",
  "disable account":
    "🚫 Admins can disable accounts under Employee Details → Status.",
  "reactivate account":
    "♻️ Admins can reactivate accounts under Employee Details → Status.",
  "salary report export":
    "📤 HR can export salary reports in PDF 📑 or CSV 📊 format.",
  "update system":
    "🛠️ Admins update system via Admin Dashboard → Updates.",
  "view employee list":
    "👥 Admins/HR can view the complete employee list 📋.",
  "forgot username email":
    "📧 Check your registered email for username reminder 📨.",
  "generate annual report":
    "📆 HR can generate annual reports under Reports → Yearly.",
  bye: "👋 Bye sir, Have a great Day..! ☀️",
  "thank you": "🙏 You're always welcome..! 🌟",
  thankyou: "🙏 You're always welcome..! 🌟",
  hi: "👋 Hello sir, how can I help you today? 😃",
  hello: "👋 Hello sir, how can I help you today? 😃",
  process:
    "⚡ If you're a new user, first register 📝 with your credentials, and then try login 🔑",
};


const getBestAnswer = (input) => {
  const userWords = input.toLowerCase().match(/\w+/g) || [];
  let bestMatch = "";
  let maxScore = 0;

  for (const question of Object.keys(FAQ)) {
    const questionWords = question.toLowerCase().match(/\w+/g) || [];
    const score = userWords.filter((w) => questionWords.includes(w)).length;
    if (score > maxScore) {
      maxScore = score;
      bestMatch = question;
    }
  }

  return maxScore > 0 ? FAQ[bestMatch] : "Sorry, I can't help with that.";
};

const getTopFaqSuggestions = (input) => {
  if (!input.trim()) return Object.keys(FAQ).slice(0, 4);

  const userWords = input.toLowerCase().match(/\w+/g) || [];
  const scoredFaqs = Object.keys(FAQ).map((q) => {
    const questionWords = q.toLowerCase().match(/\w+/g) || [];
    const score = userWords.filter((w) => questionWords.includes(w)).length;
    return { question: q, score };
  });

  return scoredFaqs
    .sort((a, b) => b.score - a.score)
    .slice(0, 4)
    .map((item) => item.question);
};

export default function ChatBot() {
  const { isDarkMode } = useTheme();
  const [open, setOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [typing, setTyping] = useState(false);
  const messagesEndRef = useRef(null);

  const sendMessage = (text) => {
    if (!text.trim()) return;

    setMessages((prev) => [...prev, { sender: "user", text }]);
    setInput("");
    setTyping(true);

    setTimeout(() => {
      const answer = getBestAnswer(text);
      setTyping(false);
      setMessages((prev) => [...prev, { sender: "bot", text: answer }]);
    }, 1000);
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, typing]);

  return (
    <>
      {open && (
        <div
          className="fixed inset-0 bg-black/40 backdrop-blur-sm z-[999]"
          onClick={() => setOpen(false)}
        />
      )}

      {open && (
        <div
          className={`fixed flex flex-col shadow-2xl z-[1000] transition-all duration-300 
    inset-0 w-full h-full p-3 rounded-none
    sm:inset-auto sm:bottom-20 sm:right-6 sm:w-80 sm:h-[480px] sm:rounded-2xl sm:p-4
    ${
      isDarkMode
        ? "bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-gray-100 border border-gray-700/40"
        : "bg-gradient-to-br from-white via-blue-50 to-white text-gray-800 border border-gray-200/40"
    }`}
        >
          <div className="flex items-center justify-between mb-3 ">
            <h3 className="font-semibold flex items-center gap-2 text-sm sm:text-base">
              🤖 Salary Bot
            </h3>
            <button
              onClick={() => setOpen(false)}
              className={`hover:opacity-80 transition-colors text-lg ${
                isDarkMode ? "text-gray-300" : "text-gray-500"
              }`}
            >
              ✕
            </button>
          </div>

          <div className="flex-1 overflow-y-auto space-y-2 px-1 mb-3 custom-scrollbar">
            {messages.map((msg, i) => (
              <div
                key={i}
                className={`flex items-end ${
                  msg.sender === "user" ? "justify-end" : "justify-start"
                }`}
              >
                {msg.sender === "bot" && (
                  <div
                    className={`w-7 h-7 rounded-full flex items-center justify-center text-xs mr-1
                  ${isDarkMode ? "bg-gray-700" : "bg-gray-300"}`}
                  >
                    🤖
                  </div>
                )}

                <div
                  className={`p-2 rounded-2xl max-w-[75%] text-xs sm:text-sm shadow-sm
                  ${
                    msg.sender === "user"
                      ? isDarkMode
                        ? "bg-teal-500 text-white"
                        : "bg-blue-500 text-white"
                      : isDarkMode
                      ? "bg-gray-800 text-gray-100"
                      : "bg-gray-100 text-gray-800"
                  }`}
                >
                  {msg.text}
                </div>

                {msg.sender === "user" && (
                  <div
                    className={`w-7 h-7 rounded-full flex items-center justify-center text-xs ml-1
                  ${
                    isDarkMode
                      ? "bg-teal-500 text-white"
                      : "bg-blue-500 text-white"
                  }`}
                  >
                    👤
                  </div>
                )}
              </div>
            ))}

            {typing && (
              <div className="flex items-end">
                <div
                  className={`w-7 h-7 rounded-full flex items-center justify-center text-xs mr-1
                ${isDarkMode ? "bg-gray-700" : "bg-gray-300"}`}
                >
                  🤖
                </div>
                <div
                  className={`p-2 rounded-xl max-w-[55%] text-xs flex gap-1
                ${
                  isDarkMode
                    ? "bg-gray-800 text-gray-100"
                    : "bg-gray-100 text-gray-800"
                }`}
                >
                  <span className="animate-bounce">.</span>
                  <span className="animate-bounce animation-delay-200">.</span>
                  <span className="animate-bounce animation-delay-400">.</span>
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          <div className="flex gap-2 mt-auto">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && sendMessage(input)}
              placeholder="Type a message..."
              className={`flex-1 border rounded-full px-3 py-2 text-sm focus:outline-none focus:ring-2
            ${
              isDarkMode
                ? "bg-gray-900/50 text-gray-100 border-gray-600 focus:ring-teal-400"
                : "bg-white text-black border-gray-300 focus:ring-blue-400"
            }`}
            />
            <button
              onClick={() => sendMessage(input)}
              className={`rounded-full px-4 py-2 text-sm font-medium shadow-md transition-transform hover:scale-105
              ${
                isDarkMode
                  ? "bg-teal-500 hover:bg-teal-600 text-white"
                  : "bg-blue-500 hover:bg-blue-600 text-white"
              }`}
            >
              Send
            </button>
          </div>

          <div className="flex flex-wrap gap-2 mt-3">
            {getTopFaqSuggestions(input).map((q, i) => (
              <button
                key={i}
                onClick={() => sendMessage(q)}
                className={`text-xs px-3 py-1 rounded-full font-medium transition-colors hover:opacity-80
                ${
                  isDarkMode
                    ? "bg-gray-700/60 text-white"
                    : "bg-gray-200/80 text-black"
                }`}
              >
                {q}
              </button>
            ))}
          </div>
        </div>
      )}

      <button
        onClick={() => setOpen(!open)}
        className={`fixed bottom-4 right-4 sm:bottom-6 sm:right-6 w-12 h-12 sm:w-16 sm:h-16 rounded-full flex items-center justify-center shadow-2xl hover:scale-110 transition-transform duration-300
        ${
          isDarkMode
            ? "bg-[#ffffff33] border border-gray-500"
            : "bg-[#dbeafecc] border border-gray-300"
        }`}
      >
        <span
          className={`text-xl sm:text-2xl ${
            isDarkMode ? "text-teal-400" : "text-blue-600"
          } animate-pulse`}
        >
          <FaRobot />
        </span>
      </button>
    </>
  );
}
